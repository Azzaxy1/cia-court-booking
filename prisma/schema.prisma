// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  image         String?
  phone         String?
  password      String?
  emailVerified DateTime?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt
  Account       Account[]
  Session       Session[]
  Booking       Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Court {
  id          String         @id @default(cuid())
  name        String
  type        CourtType
  image       String
  description String
  surfaceType FutsalSurface?
  capacity    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Booking     Booking[]
  Schedule    Schedule[]
}

model Booking {
  id              String        @id @default(cuid())
  userId          String
  courtId         String
  startTime       String
  endTime         String
  courtType       CourtType
  duration        Int
  date            DateTime
  paymentMethod   String
  isConfirmed     Boolean       @default(false)
  amount          Int
  status          BookingStatus @default(Pending)
  rescheduleFrom  DateTime?
  rescheduleCount Int           @default(0)
  cancelReason    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  court       Court         @relation(fields: [courtId], references: [id])
  Transaction Transaction[]
  Schedule    Schedule[]
}

model Transaction {
  id              String    @id @default(cuid())
  bookingId       String
  paymentMethod   String
  transactionId   String    @unique
  amount          Int
  midtransToken   String?
  midtransOrderId String?
  paymentUrl      String?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiredAt       DateTime?

  booking Booking @relation(fields: [bookingId], references: [id])
}

model Schedule {
  id        String   @id @default(cuid())
  courtId   String
  bookingId String?
  date      DateTime
  timeSlot  String
  price     Int
  dayType   DayType
  available Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  court   Court    @relation(fields: [courtId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])

  @@index([courtId, date, timeSlot])
}

enum Role {
  CUSTOMER
  CASHIER
  OWNER
}

enum CourtType {
  Futsal
  Badminton
  TenisMeja
}

enum FutsalSurface {
  Interlok
  Rumput
  Semen
}

enum DayType {
  Weekend
  Weekday
}

enum TimeSlot {
  Pagi
  Siang
  Malam
}

enum BookingStatus {
  Pending
  Paid
  Canceled
  Refunded
}
