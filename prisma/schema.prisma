generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  image            String?
  phone            String?
  password         String?
  emailVerified    DateTime?
  role             Role               @default(CUSTOMER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @default(now()) @updatedAt
  Account          Account[]
  Booking          Booking[]
  RecurringBooking RecurringBooking[]
  Session          Session[]
}
  
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Court {
  id               String             @id @default(cuid())
  name             String
  type             CourtType
  image            String
  description      String
  surfaceType      FutsalSurface?
  capacity         Int
  isDeleted        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Booking          Booking[]
  RecurringBooking RecurringBooking[]
  Schedule         Schedule[]
}

model Booking {
  id                 String            @id @default(cuid())
  userId             String
  courtId            String
  startTime          String
  endTime            String
  courtType          CourtType
  duration           Int
  date               DateTime
  paymentMethod      String
  isConfirmed        Boolean           @default(false)
  amount             Int
  status             BookingStatus     @default(Pending)
  rescheduleFrom     DateTime?
  rescheduleCount    Int               @default(0)
  cancelReason       String?
  recurringBookingId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  court              Court             @relation(fields: [courtId], references: [id])
  recurringBooking   RecurringBooking? @relation(fields: [recurringBookingId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  Schedule           Schedule[]
  Transaction        Transaction[]
}

model RecurringBooking {
  id            String        @id @default(cuid())
  userId        String
  courtId       String
  startTime     String
  endTime       String
  courtType     CourtType
  duration      Int
  dayOfWeek     Int
  startDate     DateTime
  endDate       DateTime
  paymentMethod String
  totalAmount   Int
  status        BookingStatus @default(Pending)
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bookings      Booking[]
  court         Court         @relation(fields: [courtId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  Transaction   Transaction[]
}

model Transaction {
  id                 String            @id @default(cuid())
  bookingId          String?
  recurringBookingId String?
  paymentMethod      String
  transactionId      String            @unique
  amount             Int
  midtransToken      String?
  midtransOrderId    String?
  paymentUrl         String?
  status             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  expiredAt          DateTime?
  booking            Booking?          @relation(fields: [bookingId], references: [id])
  recurringBooking   RecurringBooking? @relation(fields: [recurringBookingId], references: [id])
}

model Schedule {
  id        String   @id @default(cuid())
  courtId   String
  bookingId String?
  date      DateTime
  timeSlot  String
  price     Int
  dayType   DayType
  available Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking? @relation(fields: [bookingId], references: [id])
  court     Court    @relation(fields: [courtId], references: [id])

  @@unique([courtId, date, timeSlot])
  @@index([courtId, date, timeSlot])
}

model SystemProtection {
  id             String   @id @default(cuid())
  isActive       Boolean  @default(true)
  protectionDays Int      @default(30)
  migratedAt     DateTime @default(now())
  expiredAt      DateTime
  description    String?  @default("System protection for trial period")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("system_protection")
}

enum Role {
  CUSTOMER
  CASHIER
  OWNER
}

enum CourtType {
  Futsal
  Badminton
  TenisMeja
}

enum FutsalSurface {
  Interlok
  Rumput
  Semen
}

enum DayType {
  Weekend
  Weekday
}

enum TimeSlot {
  Pagi
  Siang
  Malam
}

enum BookingStatus {
  Pending
  Paid
  Canceled
  Refunded
}
